{"version":3,"sources":["maps/us/Country.js","maps/Map.js","maps/us/report-service.js"],"names":["Country","history","useHistory","reportType","useContext","ReportContext","colorKey","colorMaxValue","data","summary","colorMinValue","colorValueInterval","Math","round","drilldown","e","push","point","properties","toLowerCase","hasSeparatorLines","mapData","separatorLines","seriesJoinBy","title","getTitle","tooltipFormat","tooltipHeader","tooltipSuffix","HighchartsReact","lazy","exporting","Highcharts","boost","map","setOptions","chart","style","fontFamily","Map","baseColor","borderLines","hoverColor","stateBorderColor","tooltipTitle","color","Color","separatorLineData","name","shadow","type","options","enabled","useGPUTranslations","usePreallocated","events","colorAxis","max","min","stops","key","tickInterval","activeDataLabelStyle","textDecoration","textOutline","drillUpButton","relativeTo","position","x","y","legend","backgroundColor","defaultOptions","floating","layout","align","mapNavigation","buttonOptions","verticalAlign","plotOptions","mapline","showInLegend","enableMouseTracking","series","borderWidth","dataLabels","format","joinBy","states","hover","tooltip","pointFormat","headerFormat","valueSuffix","text","fallback","className","constructorType","highcharts","defaultProps","cases","deaths","lastUpdated","charAt","toUpperCase","slice","toLocaleString","Date","toLocaleDateString","toLocaleTimeString"],"mappings":"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","file":"static/js/23.17a95fd9.chunk.js","sourcesContent":["import mapData from '@highcharts/map-collection/countries/us/us-all.geo.json'\nimport React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport ReportContext from '../../core/ReportContext'\nimport Map from '../Map'\nimport data from './country.json'\nimport { getTitle } from './report-service'\nimport separatorLines from './us-separator-lines.json'\n\nfunction Country() {\n  const history = useHistory()\n  const { reportType } = useContext(ReportContext)\n  return (\n    <Map\n      colorKey={reportType}\n      colorMaxValue={data.summary[reportType]}\n      colorMinValue={0}\n      colorValueInterval={Math.round(data.summary[reportType] / 5)}\n      data={data.data}\n      drilldown={(e) => history.push(`/us/${e.point.properties['postal-code'].toLowerCase()}`)}\n      hasSeparatorLines={true}\n      mapData={mapData}\n      separatorLines={separatorLines}\n      seriesJoinBy={'fips'}\n      title={getTitle({ ...data.summary, reportType })}\n      tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}<br />Click for Details\"\n      tooltipHeader=\"{point.key}<br />\"\n      tooltipSuffix=\"\"\n    />\n  )\n}\n\nexport default Country\n","import Color from 'color'\nimport Highcharts from 'highcharts'\nimport boost from 'highcharts/modules/boost'\nimport drilldown from 'highcharts/modules/drilldown'\nimport exporting from 'highcharts/modules/exporting'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\n// import darkUnica from 'highcharts/themes/dark-unica'\nimport './Map.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\nexporting(Highcharts)\nboost(Highcharts)\ndrilldown(Highcharts)\nmap(Highcharts)\n// darkUnica(Highcharts)\n\nHighcharts.setOptions({\n  chart: {\n    style: {\n      fontFamily: 'Lato',\n    },\n  },\n})\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction Map({\n  baseColor,\n  borderLines,\n  colorKey,\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  drilldown,\n  hoverColor,\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor,\n  title,\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle,\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map((key) => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`,\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`],\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        color: DEFAULT_BORDER_COLOR,\n        data: separatorLines,\n        name: 'Separator',\n        shadow: false,\n        type: 'mapline',\n      }\n    : {}\n\n  const options = {\n    boost: {\n      enabled: true,\n      useGPUTranslations: true,\n      usePreallocated: true,\n    },\n    chart: {\n      events: {\n        drilldown,\n      },\n      fontFamily: 'Lato',\n    },\n    colorAxis: {\n      max: colorMaxValue,\n      min: colorMinValue,\n      stops: colorStops,\n      tickInterval: colorValueInterval,\n    },\n    drilldown: {\n      activeDataLabelStyle: {\n        color: '#FFFFFF',\n        textDecoration: 'none',\n        textOutline: '1px #000000',\n      },\n      drillUpButton: {\n        relativeTo: 'spacingBox',\n        position: {\n          x: 0,\n          y: 60,\n        },\n      },\n    },\n    legend: {\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor,\n      floating: true,\n      layout: 'vertical',\n      align: 'right',\n    },\n    mapNavigation: {\n      buttonOptions: {\n        verticalAlign: 'bottom',\n      },\n      enabled: true,\n    },\n    plotOptions: {\n      map: {\n        colorKey,\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false,\n      },\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data,\n        dataLabels: {\n          enabled: true,\n          format: '{point.properties.postal-code}',\n        },\n        joinBy: seriesJoinBy,\n        mapData,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor,\n          },\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix,\n        },\n      },\n      {\n        color: stateBorderColor,\n        data: borderLines,\n        shadow: false,\n        type: 'mapline',\n      },\n      separatorLineData,\n    ],\n    title: {\n      text: title,\n    },\n  }\n\n  return colorMaxValue && data && mapData && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'mapChart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: colorMaxValue, data, mapData, and seriesJoinBy'\n  )\n}\n\nMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled',\n}\n\nMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  drilldown: PropTypes.func,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string,\n}\n\nexport default Map\n","function getTitle({ name, cases, deaths, lastUpdated, reportType }) {\n  return `<span style=\"font-size:24px;\">COVID-19: ${name} ${\n    reportType.charAt(0).toUpperCase() + reportType.slice(1)\n  }</span><br /><span style=\"font-size:16px;\">Deaths: ${deaths.toLocaleString('en-US')} | Cases: ${cases.toLocaleString(\n    'en-US'\n  )}</span><br />\n  <span style=\"font-size:12px; color: #333333\">\n    Source: </span>\n    <a style=\"font-size:12px; text-decoration:underline; color: #333333\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">The New York Times</a><span style=\"font-size:12px; color: #333333\"> | Last Updated: ${new Date(\n      lastUpdated\n    ).toLocaleDateString()} ${new Date(lastUpdated).toLocaleTimeString()}</span>`\n}\n\nexport { getTitle }\n"],"sourceRoot":""}