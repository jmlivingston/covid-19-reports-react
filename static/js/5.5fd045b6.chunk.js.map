{"version":3,"sources":["reports/Bar.js","reports/Country.js","reports/us/US.js","reports/Map.js","reports/us/report-service.js"],"names":["HighchartsReact","lazy","Bar","baseColor","data","drilldown","hoverColor","seriesJoinBy","title","tooltipFormat","tooltipHeader","tooltipSuffix","tooltipTitle","options","boost","enabled","useGPUTranslations","usePreallocated","chart","events","fontFamily","height","type","activeDataLabelStyle","color","textDecoration","textOutline","drillUpButton","relativeTo","position","x","y","legend","plotOptions","series","animation","pointPadding","pointWidth","borderWidth","sort","a","b","cases","map","datum","index","state","toLocaleString","dataLabels","align","format","joinBy","name","shadow","states","hover","tooltip","pointFormat","headerFormat","valueSuffix","text","xAxis","labels","reserveSpace","scrollbar","yAxis","min","fallback","Loader","className","constructorType","highcharts","Highcharts","accessibility","exporting","exportData","defaultProps","Country","mapData","reportService","separatorLines","summary","history","useHistory","reportType","useContext","ReportContext","Map","colorKey","category","colorMaxValue","colorMinValue","colorValueInterval","Math","round","point","push","properties","toLowerCase","getTitle","US","borderLines","stateBorderColor","Color","separatorLineData","colorAxis","max","stops","key","tickInterval","backgroundColor","defaultOptions","floating","layout","mapNavigation","buttonOptions","verticalAlign","mapline","showInLegend","enableMouseTracking","deaths","lastUpdated","charAt","toUpperCase","slice","details","getDetails","Date","toLocaleDateString","toLocaleTimeString"],"mappings":"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","file":"static/js/5.5fd045b6.chunk.js","sourcesContent":["import Highcharts from 'highcharts'\nimport accessibility from 'highcharts/modules/accessibility'\nimport boost from 'highcharts/modules/boost'\nimport drilldown from 'highcharts/modules/drilldown'\nimport exportData from 'highcharts/modules/export-data'\nimport exporting from 'highcharts/modules/exporting'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\nimport './Bar.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\naccessibility(Highcharts)\nexporting(Highcharts)\nboost(Highcharts)\ndrilldown(Highcharts)\nexportData(Highcharts)\n\nfunction Bar({\n  baseColor,\n  data,\n  drilldown,\n  hoverColor,\n  seriesJoinBy,\n  title,\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle,\n}) {\n  const formattedData = data\n    .sort((a, b) => (a.cases < b.cases ? 1 : -1))\n    .map((datum, index) => [`${index + 1}. ${datum.state} - ${datum.cases.toLocaleString()}`, datum.cases])\n\n  const options = {\n    boost: {\n      enabled: true,\n      useGPUTranslations: true,\n      usePreallocated: true,\n    },\n    chart: {\n      events: {\n        drilldown,\n      },\n      fontFamily: 'Lato',\n      height: 2400,\n      type: 'bar',\n    },\n    drilldown: {\n      activeDataLabelStyle: {\n        color: '#FFFFFF',\n        textDecoration: 'none',\n        textOutline: '1px #000000',\n      },\n      drillUpButton: {\n        relativeTo: 'spacingBox',\n        position: {\n          x: 0,\n          y: 60,\n        },\n      },\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        animation: false,\n        color: baseColor,\n        pointPadding: 10,\n        pointWidth: 20,\n      },\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data: formattedData,\n        dataLabels: {\n          enabled: false,\n          color: '#FFFFFF',\n          align: 'right',\n          format: '{point.y}',\n          y: 0,\n          x: 75,\n        },\n        joinBy: seriesJoinBy,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor,\n          },\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix,\n        },\n      },\n    ],\n    title: {\n      text: title,\n    },\n    xAxis: {\n      labels: {\n        reserveSpace: true,\n        align: 'left',\n      },\n      scrollbar: {\n        enabled: true,\n      },\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'asdf',\n      },\n    },\n  }\n\n  return data && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'chart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: data, mapData, and seriesJoinBy'\n  )\n}\n\nBar.defaultProps = {\n  baseColor: 'rgba(255,0,0,0.7)',\n  hoverColor: '#A4EDBA',\n  title: 'Untitled',\n}\n\nBar.propTypes = {\n  baseColor: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  drilldown: PropTypes.func,\n  hoverColor: PropTypes.string,\n  seriesJoinBy: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string,\n}\n\nexport default Bar\n","import PropTypes from 'prop-types'\nimport React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport ReportContext from '../core/ReportContext'\nimport Bar from './Bar'\nimport './Country.css'\nimport Map from './Map'\n\nfunction Country({ data, mapData, reportService, separatorLines, summary }) {\n  const history = useHistory()\n  const { reportType } = useContext(ReportContext)\n\n  return (\n    <>\n      {reportType.type === 'map' && (\n        <div className=\"map-wrapper\">\n          <Map\n            colorKey={reportType.category}\n            colorMaxValue={summary[`${reportType.category}Max`]}\n            colorMinValue={0}\n            colorValueInterval={Math.round(summary[`${reportType.category}Max`] / 5)}\n            data={data}\n            drilldown={({ point }) => history.push(`/us/${point.properties['postal-code'].toLowerCase()}`)}\n            mapData={mapData}\n            separatorLines={separatorLines}\n            seriesJoinBy={'fips'}\n            title={reportService.getTitle({ ...summary, reportType: reportType.category })}\n            tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}<br />Click for Details\"\n            tooltipHeader=\"{point.key}<br />\"\n          />\n        </div>\n      )}\n      {reportType.type === 'chart' && (\n        <Bar\n          colorKey={reportType.category}\n          colorMaxValue={summary[`${reportType.category}Max`]}\n          colorMinValue={0}\n          colorValueInterval={Math.round(summary[`${reportType.category}Max`] / 5)}\n          data={data}\n          drilldown={({ point }) => history.push(`/us/${point.properties['postal-code'].toLowerCase()}`)}\n          seriesJoinBy={'fips'}\n          title={reportService.getTitle({ ...summary, reportType: reportType.category })}\n          tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}<br />Click for Details\"\n          tooltipHeader=\"{point.key}<br />\"\n        />\n      )}\n    </>\n  )\n}\n\nCountry.propTypes = {\n  data: PropTypes.array,\n  mapData: PropTypes.object,\n  reportService: PropTypes.object,\n  separatorLines: PropTypes.array,\n  summary: PropTypes.object,\n}\n\nexport default Country\n","import mapData from '@highcharts/map-collection/countries/us/us-all.geo.json'\nimport React from 'react'\nimport separatorLines from '../../data/us/us-separator-lines.json'\nimport data from '../../data/us/us.json'\nimport Country from '../Country'\nimport reportService from './report-service'\n\nfunction US() {\n  return <Country {...data} mapData={mapData} reportService={reportService} separatorLines={separatorLines} />\n}\n\nexport default US\n","import Color from 'color'\nimport Highcharts from 'highcharts'\nimport boost from 'highcharts/modules/boost'\nimport drilldown from 'highcharts/modules/drilldown'\nimport exporting from 'highcharts/modules/exporting'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\nimport './Map.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\nexporting(Highcharts)\nboost(Highcharts)\ndrilldown(Highcharts)\nmap(Highcharts)\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction Map({\n  baseColor,\n  borderLines,\n  colorKey,\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  drilldown,\n  hoverColor,\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor,\n  title,\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle,\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map((key) => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`,\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`],\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        color: DEFAULT_BORDER_COLOR,\n        data: separatorLines,\n        name: 'Separator',\n        shadow: false,\n        type: 'mapline',\n      }\n    : {}\n\n  const options = {\n    boost: {\n      enabled: true,\n      useGPUTranslations: true,\n      usePreallocated: true,\n    },\n    chart: {\n      events: {\n        drilldown,\n      },\n      fontFamily: 'Lato',\n    },\n    colorAxis: {\n      max: colorMaxValue,\n      min: colorMinValue,\n      stops: colorStops,\n      tickInterval: colorValueInterval,\n    },\n    drilldown: {\n      activeDataLabelStyle: {\n        color: '#FFFFFF',\n        textDecoration: 'none',\n        textOutline: '1px #000000',\n      },\n      // drillUpButton: {\n      //   relativeTo: 'spacingBox',\n      //   position: {\n      //     x: 0,\n      //     y: 60,\n      //   },\n      // },\n    },\n    legend: {\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor,\n      floating: true,\n      layout: 'vertical',\n      align: 'right',\n    },\n    mapNavigation: {\n      buttonOptions: {\n        verticalAlign: 'bottom',\n      },\n      enabled: true,\n    },\n    plotOptions: {\n      map: {\n        colorKey,\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false,\n      },\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data,\n        dataLabels: {\n          enabled: true,\n          format: '{point.properties.postal-code}',\n        },\n        joinBy: seriesJoinBy,\n        mapData,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor,\n          },\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix,\n        },\n      },\n      {\n        color: stateBorderColor,\n        data: borderLines,\n        shadow: false,\n        type: 'mapline',\n      },\n      separatorLineData,\n    ],\n    title: {\n      text: title,\n    },\n  }\n\n  return colorMaxValue && data && mapData && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'mapChart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: colorMaxValue, data, mapData, and seriesJoinBy'\n  )\n}\n\nMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled',\n}\n\nMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  drilldown: PropTypes.func,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string,\n}\n\nexport default Map\n","function getDetails({ state }) {\n  let details = ''\n  switch (state) {\n    case 'New York':\n      details = 'NYC split between boroughs.'\n      break\n    case 'Missouri':\n      details = 'KC split between counties.'\n      break\n    default:\n      break\n  }\n  return details\n}\n\nconst reportService = {\n  getTitle: ({ name, cases, deaths, lastUpdated, reportType }) => {\n    return `<span style=\"font-size:24px;\">COVID-19: ${name} ${\n      reportType.charAt(0).toUpperCase() + reportType.slice(1)\n    }</span><br /><span style=\"font-size:16px;\">Deaths: ${deaths.toLocaleString(\n      'en-US'\n    )} | Cases: ${cases.toLocaleString('en-US')}${getDetails({ name })}</span><br />\n  <span style=\"font-size:12px; color: #333333\">\n    Source: </span>\n    <a style=\"font-size:12px; text-decoration:underline; color: #333333\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">The New York Times</a><span style=\"font-size:12px; color: #333333\"> | Last Updated: ${new Date(\n      lastUpdated\n    ).toLocaleDateString()} ${new Date(lastUpdated).toLocaleTimeString()}</span>`\n  },\n}\n\nexport default reportService\n"],"sourceRoot":""}