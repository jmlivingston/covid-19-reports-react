{"version":3,"sources":["maps/CountryMap.js","reports/us/report-service.js","reports/us/USByCounty.js","reports/us/USByState.js","App.js","index.js"],"names":["map","Highcharts","CountryMap","baseColor","borderLines","colorKey","colorMaxValue","colorMinValue","colorValueInterval","data","hoverColor","mapData","separatorLines","seriesJoinBy","stateBorderColor","title","tooltipFormat","tooltipHeader","tooltipSuffix","tooltipTitle","color","Color","colorStops","key","separatorLineData","type","name","shadow","options","text","legend","layout","align","floating","backgroundColor","defaultOptions","mapNavigation","enabled","colorAxis","min","max","tickInterval","stops","plotOptions","mapline","showInLegend","enableMouseTracking","series","joinBy","tooltip","pointFormat","headerFormat","valueSuffix","borderWidth","states","hover","className","constructorType","highcharts","defaultProps","getTitle","summary","cases","toLocaleString","deaths","Date","lastUpdated","toLocaleDateString","toLocaleTimeString","USByCounty","maxValue","sort","a","b","Math","round","USByState","hasSeparatorLines","App","useState","isStateView","setIsStateView","onClick","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"26sRAQAA,IAAIC,KAIJ,SAASC,EAAT,GAkBI,IAAD,IAjBDC,iBAiBC,MAjBW,UAiBX,EAhBDC,EAgBC,EAhBDA,YAgBC,IAfDC,gBAeC,MAfU,QAeV,EAdDC,EAcC,EAdDA,cACAC,EAaC,EAbDA,cACAC,EAYC,EAZDA,mBACAC,EAWC,EAXDA,KAWC,IAVDC,kBAUC,MAVY,UAUZ,EATDC,EASC,EATDA,QACAC,EAQC,EARDA,eACAC,EAOC,EAPDA,aAOC,IANDC,wBAMC,MApB0B,UAoB1B,MALDC,aAKC,MALO,WAKP,EAJDC,EAIC,EAJDA,cACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,cACAC,EACC,EADDA,aAEMC,EAAQC,IAAMlB,GAEdmB,EAAU,sBAEX,CAAC,KAAO,IAAM,GAAK,KAAMtB,KAAI,SAAAuB,GAAG,MAAI,CACrCA,EADqC,eAE7BH,EAAMA,MAAM,GAFiB,aAEVA,EAAMA,MAAM,GAFF,aAESA,EAAMA,MAAM,GAFrB,aAE4BG,EAF5B,UAFzB,CAMd,CAAC,EAAD,cAAWH,EAAMA,MAAM,GAAvB,aAA8BA,EAAMA,MAAM,GAA1C,aAAiDA,EAAMA,MAAM,GAA7D,QAGII,EAAoBZ,EACtB,CACEa,KAAM,UACNC,KAAM,YACNjB,KAAMG,EACNQ,MArCqB,UAsCrBO,QAAQ,GAEV,GAEEC,EAAU,CACdb,MAAO,CACLc,KAAMd,GAERe,OAAQ,CACNC,OAAQ,WACRC,MAAO,QACPC,UAAU,EACVC,gBACEjC,IAAWkC,gBACXlC,IAAWkC,eAAeL,QAC1B7B,IAAWkC,eAAeL,OAAOI,iBAErCE,cAAe,CACbC,SAAS,GAEXC,UAAW,CACTC,IAAKhC,EACLiC,IAAKlC,EACLmC,aAAcjC,EACdkC,MAAOpB,GAETqB,YAAa,CACX3C,IAAK,CACHK,YAEFuC,QAAS,CACPC,cAAc,EACdC,qBAAqB,IAGzBC,OAAQ,CACN,CACEpC,UACAF,OACAuC,OAAQnC,EACRa,KAAMP,EACN8B,QAAS,CACPC,YAAalC,EACbmC,aAAclC,EACdmC,YAAalC,GAEfmC,YAAa,GACbC,OAAQ,CACNC,MAAO,CACLnC,MAAOV,IAGXiB,QAAQ,GAEV,CACEF,KAAM,UACNhB,KAAML,EACNgB,MAAON,EACPa,QAAQ,GAEVH,IAGJ,OAAOlB,GACLE,GACAC,GACAE,GACAE,EACA,yBAAK2C,UAAU,sBACb,kBAAC,IAAD,CACEC,gBAAiB,WACjBC,WAAYzD,IACZ2B,QAASA,KAIb,uGAIJ1B,EAAWyD,aAAe,CACxBxD,UAAW,UACXE,SAAU,QACVK,WAAY,UACZI,iBA1H2B,UA2H3BC,MAAO,YAuBMb,Q,OC1Jf,SAAS0D,EAAT,GAA8B,IAAV7C,EAAS,EAATA,MAClB,MAAM,2CAAN,OAAkDA,EAAlD,6DAA4G8C,EAAQC,MAAMC,eACxH,SADF,sBAEeF,EAAQG,OAAOD,eAC5B,SAHF,4BAIqB,IAAIE,KACvBJ,EAAQK,aACRC,qBANF,YAM0B,IAAIF,KAC5BJ,EAAQK,aACRE,qBARF,w9B,0BC6BaC,MAxBf,WACE,IAAM9C,EAAM,QACN+C,EAAW7D,EAAK8D,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEjD,GAAOkD,EAAElD,IAAQ,EAAI,KAAI,GAAGA,GACpE,OACE,kBAAC,EAAD,CACEpB,UAAU,UACVC,YAAaA,EACbC,SAAUkB,EACVhB,cAAe,EACfD,cAAegE,EACf9D,mBAAoBkE,KAAKC,MAAML,EAAW,GAC1C7D,KAAMA,EACNC,WAAW,UACXC,QAASA,EACTC,eAAgBA,EAChBC,aAAc,OACdE,MAAO6C,EAAS,CAAE7C,MAAO,iBACzBC,cAAc,yDACdE,cAAc,GACdD,cAAc,+B,eCIL2D,MAxBf,WACE,IAAMrD,EAAM,QACN+C,EAAW7D,EAAK8D,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEjD,GAAOkD,EAAElD,IAAQ,EAAI,KAAI,GAAGA,GACpE,OACE,kBAAC,EAAD,CACEpB,UAAU,UACVE,SAAUkB,EACVhB,cAAe,EACfD,cAAegE,EACf9D,mBAAoBkE,KAAKC,MAAML,EAAW,GAC1C7D,KAAMA,EACNC,WAAW,UACXmE,mBAAmB,EACnBlE,QAASA,EACTC,eAAgBA,EAChBC,aAAc,OACdE,MAAO6C,EAAS,CAAE7C,MAAO,gBACzBC,cAAc,yDACdE,cAAc,GACdD,cAAc,uBCLL6D,MAhBf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,KAEb,OACE,oCACE,4BACEzB,UAAS,cACT0B,QAAS,kBAAMD,GAAgBD,KAC/B,8CAAMA,EAAc,UAAY,SAAhC,WAEF,kBAAC,WAAD,CAAUG,SAAU,4CACjBH,EAAc,kBAAC,EAAD,MAAgB,kBAAC,EAAD,S,MCVvCI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.afab1fac.chunk.js","sourcesContent":["import Color from 'color'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport './CountryMap.css'\n\nmap(Highcharts)\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction CountryMap({\n  baseColor = '#FF0000',\n  borderLines,\n  colorKey = 'value',\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  hoverColor = '#A4EDBA',\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor = DEFAULT_BORDER_COLOR,\n  title = 'Untitled',\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map(key => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`]\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        type: 'mapline',\n        name: 'Separator',\n        data: separatorLines,\n        color: DEFAULT_BORDER_COLOR,\n        shadow: false\n      }\n    : {}\n\n  const options = {\n    title: {\n      text: title\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      floating: true,\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor\n    },\n    mapNavigation: {\n      enabled: true\n    },\n    colorAxis: {\n      min: colorMinValue,\n      max: colorMaxValue,\n      tickInterval: colorValueInterval,\n      stops: colorStops\n    },\n    plotOptions: {\n      map: {\n        colorKey\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false\n      }\n    },\n    series: [\n      {\n        mapData,\n        data,\n        joinBy: seriesJoinBy,\n        name: tooltipTitle,\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix\n        },\n        borderWidth: 0.5,\n        states: {\n          hover: {\n            color: hoverColor\n          }\n        },\n        shadow: false\n      },\n      {\n        type: 'mapline',\n        data: borderLines,\n        color: stateBorderColor,\n        shadow: false\n      },\n      separatorLineData\n    ]\n  }\n  return colorMaxValue &&\n    colorValueInterval &&\n    data &&\n    mapData &&\n    seriesJoinBy ? (\n    <div className=\"highcharts-wrapper\">\n      <HighchartsReact\n        constructorType={'mapChart'}\n        highcharts={Highcharts}\n        options={options}\n      />\n    </div>\n  ) : (\n    'The following props are required: colorMaxValue, colorValueInterval, data, mapData, and seriesJoinBy'\n  )\n}\n\nCountryMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled'\n}\n\nCountryMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string\n}\n\nexport default CountryMap\n","import summary from './us-summary.json'\n\nfunction getTitle({ title }) {\n  return `<span style=\"font-size:24px;\">COVID-19: ${title}</span><br /><span style=\"font-size:12px;\">Cases: ${summary.cases.toLocaleString(\n    'en-US'\n  )} | Deaths: ${summary.deaths.toLocaleString(\n    'en-US'\n  )} | Last Updated: ${new Date(\n    summary.lastUpdated\n  ).toLocaleDateString()} ${new Date(\n    summary.lastUpdated\n  ).toLocaleTimeString()}</span><br />\n  <span style=\"font-size:12px; color: gray\">\n    Data from \n    <a style=\"font-size:12px; text-decoration:underline; color: gray\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">         The New York Times</a><span style=\"font-size:12px; color: gray\">, based on reports from state and local health agencies.</span>\n  </span>\n  <br />\n  <a style=\"font-size:12px; text-decoration:underline; color: gray\" target=\"_blank\" href=\"mailto:jmlivingston@gmail.com?subject=I saw your Covid-19 map and want to hire you!\">Hire Me!</a>\n  <span style=\"font-size:12px\"> | </span>\n  <a style=\"font-size:12px; text-decoration:underline; color: gray\" target=\"_blank\" href=\"https://www.johnlivingston.io/\">johnlivingston.io</a>\n  <span style=\"font-size:12px\"> | </span>\n  <a style=\"font-size:12px; text-decoration:underline; color: gray\" target=\"_blank\" href=\"https://github.com/jmlivingston/covid-19-reports-react\">Source Code</a>`\n}\n\nexport { getTitle }\n","import mapData from '@highcharts/map-collection/countries/us/us-all-all-highres.geo.json'\nimport React from 'react'\nimport CountryMap from '../../maps/CountryMap'\nimport { getTitle } from './report-service'\nimport borderLines from './us-border-lines-highres.json'\nimport data from './us-counties-total.json'\nimport separatorLines from './us-separator-lines.json'\n\nfunction USByCounty() {\n  const key = 'cases'\n  const maxValue = data.sort((a, b) => (a[key] > b[key] ? -1 : 1))[0][key]\n  return (\n    <CountryMap\n      baseColor=\"#FF0000\"\n      borderLines={borderLines}\n      colorKey={key}\n      colorMinValue={0}\n      colorMaxValue={maxValue}\n      colorValueInterval={Math.round(maxValue / 5)}\n      data={data}\n      hoverColor=\"#A4EDBA\"\n      mapData={mapData}\n      separatorLines={separatorLines}\n      seriesJoinBy={'fips'}\n      title={getTitle({ title: 'US By County' })}\n      tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}<br />\"\n      tooltipSuffix=\"\"\n      tooltipHeader=\"County: {point.key}<br />\"\n    />\n  )\n}\n\nexport default USByCounty\n","import mapData from '@highcharts/map-collection/countries/us/us-all.geo.json'\nimport React from 'react'\nimport CountryMap from '../../maps/CountryMap'\nimport { getTitle } from './report-service'\nimport separatorLines from './us-separator-lines.json'\nimport data from './us-states-total.json'\n\nfunction USByState() {\n  const key = 'cases'\n  const maxValue = data.sort((a, b) => (a[key] > b[key] ? -1 : 1))[0][key]\n  return (\n    <CountryMap\n      baseColor=\"#FF0000\"\n      colorKey={key}\n      colorMinValue={0}\n      colorMaxValue={maxValue}\n      colorValueInterval={Math.round(maxValue / 5)}\n      data={data}\n      hoverColor=\"#A4EDBA\"\n      hasSeparatorLines={true}\n      mapData={mapData}\n      separatorLines={separatorLines}\n      seriesJoinBy={'fips'}\n      title={getTitle({ title: 'US By State' })}\n      tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}<br />\"\n      tooltipSuffix=\"\"\n      tooltipHeader=\"{point.key}<br />\"\n    />\n  )\n}\n\nexport default USByState\n","import React, { Suspense, useState } from 'react'\nimport './App.css'\nimport USByCounty from './reports/us/USByCounty'\nimport USByState from './reports/us/USByState'\n\nfunction App() {\n  const [isStateView, setIsStateView] = useState(true)\n  return (\n    <>\n      <button\n        className={`toggle-view`}\n        onClick={() => setIsStateView(!isStateView)}>\n        <>{`${isStateView ? ' County' : ' State'} View`}</>\n      </button>\n      <Suspense fallback={<div>Loading...</div>}>\n        {isStateView ? <USByState /> : <USByCounty />}\n      </Suspense>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}