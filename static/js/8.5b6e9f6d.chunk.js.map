{"version":3,"sources":["maps/CountryMap.js","maps/us/report-service.js","maps/us/USDeathsByState.js"],"names":["HighchartsReact","lazy","boost","Highcharts","map","setOptions","chart","style","fontFamily","CountryMap","baseColor","borderLines","colorKey","colorMaxValue","colorMinValue","colorValueInterval","data","hoverColor","mapData","separatorLines","seriesJoinBy","stateBorderColor","title","tooltipFormat","tooltipHeader","tooltipSuffix","tooltipTitle","color","Color","separatorLineData","name","shadow","type","options","enabled","useGPUTranslations","usePreallocated","colorAxis","max","min","stops","key","tickInterval","legend","backgroundColor","defaultOptions","floating","layout","align","mapNavigation","buttonOptions","verticalAlign","plotOptions","mapline","showInLegend","enableMouseTracking","series","borderWidth","dataLabels","format","joinBy","states","hover","tooltip","pointFormat","headerFormat","valueSuffix","text","fallback","className","constructorType","highcharts","defaultProps","getTitle","summary","deaths","toLocaleString","cases","Date","lastUpdated","toLocaleDateString","toLocaleTimeString","USByState","maxValue","sort","a","b","Math","round","hasSeparatorLines","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/8.5b6e9f6d.chunk.js","sourcesContent":["import Color from 'color'\nimport Highcharts from 'highcharts'\n// import exporting from 'highcharts/modules/exporting'\nimport boost from 'highcharts/modules/boost'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\n// import darkUnica from 'highcharts/themes/dark-unica'\nimport './CountryMap.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\n// exporting(Highcharts)\nboost(Highcharts)\nmap(Highcharts)\n// darkUnica(Highcharts)\n\nHighcharts.setOptions({\n  chart: {\n    style: {\n      fontFamily: 'Lato'\n    }\n  }\n})\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction CountryMap({\n  baseColor = '#FF0000',\n  borderLines,\n  colorKey = 'value',\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  hoverColor = '#A4EDBA',\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor = DEFAULT_BORDER_COLOR,\n  title = 'Untitled',\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map(key => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`]\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        color: DEFAULT_BORDER_COLOR,\n        data: separatorLines,\n        name: 'Separator',\n        shadow: false,\n        type: 'mapline'\n      }\n    : {}\n\n  const options = {\n    boost: {\n      enabled: true,\n      useGPUTranslations: true,\n      usePreallocated: true\n    },\n    chart: {\n      fontFamily: 'Lato'\n    },\n    colorAxis: {\n      max: colorMaxValue,\n      min: colorMinValue,\n      stops: colorStops,\n      tickInterval: colorValueInterval\n    },\n    // exporting: {\n    //   enabled: true,\n    // },\n    legend: {\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor,\n      floating: true,\n      layout: 'vertical',\n      align: 'right'\n    },\n    mapNavigation: {\n      buttonOptions: {\n        verticalAlign: 'bottom'\n      },\n      enabled: true\n    },\n    plotOptions: {\n      map: {\n        colorKey\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false\n      }\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data,\n        dataLabels: {\n          enabled: true,\n          format: '{point.properties.postal-code}'\n        },\n        joinBy: seriesJoinBy,\n        mapData,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor\n          }\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix\n        }\n      },\n      {\n        color: stateBorderColor,\n        data: borderLines,\n        shadow: false,\n        type: 'mapline'\n      },\n      separatorLineData\n    ],\n    title: {\n      text: title\n    }\n  }\n\n  return colorMaxValue && colorValueInterval && data && mapData && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'mapChart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: colorMaxValue, colorValueInterval, data, mapData, and seriesJoinBy'\n  )\n}\n\nCountryMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled'\n}\n\nCountryMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string\n}\n\nexport default CountryMap\n","import summary from './us-summary.json'\n\nfunction getTitle({ title }) {\n  return `<span style=\"font-size:24px;\">COVID-19: ${title}</span><br /><span style=\"font-size:16px;\">Deaths: ${summary.deaths.toLocaleString(\n    'en-US'\n  )} | Cases: ${summary.cases.toLocaleString('en-US')}</span><br />\n  <span style=\"font-size:12px; color: #333333\">\n    Source: </span>\n    <a style=\"font-size:12px; text-decoration:underline; color: #333333\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">The New York Times</a><span style=\"font-size:12px; color: #333333\"> | Last Updated: ${new Date(\n      summary.lastUpdated\n    ).toLocaleDateString()} ${new Date(summary.lastUpdated).toLocaleTimeString()}</span>`\n}\n\nexport { getTitle }\n","import mapData from '@highcharts/map-collection/countries/us/us-all.geo.json'\nimport React from 'react'\nimport CountryMap from '../CountryMap'\nimport { getTitle } from './report-service'\nimport separatorLines from './us-separator-lines.json'\nimport data from './us-states-total.json'\n\nfunction USByState() {\n  // const { reportType = 'deaths' } = useParams()\n  const reportType = 'deaths'\n  const maxValue = data.sort((a, b) => (a[reportType] > b[reportType] ? -1 : 1))[0][reportType]\n  return (\n    <CountryMap\n      baseColor=\"#FF0000\"\n      colorKey={reportType}\n      colorMaxValue={maxValue}\n      colorMinValue={0}\n      colorValueInterval={Math.round(maxValue / 5)}\n      data={data}\n      hasSeparatorLines={true}\n      hoverColor=\"#A4EDBA\"\n      mapData={mapData}\n      separatorLines={separatorLines}\n      seriesJoinBy={'fips'}\n      title={getTitle({ title: `USA State ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}` })}\n      tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}<br />\"\n      tooltipHeader=\"{point.key}<br />\"\n      tooltipSuffix=\"\"\n    />\n  )\n}\n\nexport default USByState\n"],"sourceRoot":""}