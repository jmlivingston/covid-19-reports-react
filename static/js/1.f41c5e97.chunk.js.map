{"version":3,"sources":["maps/CountryMap.js","maps/us/report-service.js"],"names":["HighchartsReact","lazy","exporting","Highcharts","map","setOptions","chart","style","fontFamily","CountryMap","baseColor","borderLines","colorKey","colorMaxValue","colorMinValue","colorValueInterval","data","hoverColor","mapData","separatorLines","seriesJoinBy","stateBorderColor","title","tooltipFormat","tooltipHeader","tooltipSuffix","tooltipTitle","color","Color","separatorLineData","name","shadow","type","options","colorAxis","max","min","stops","key","tickInterval","enabled","legend","backgroundColor","defaultOptions","floating","layout","align","mapNavigation","buttonOptions","verticalAlign","plotOptions","mapline","showInLegend","enableMouseTracking","series","borderWidth","dataLabels","format","joinBy","states","hover","tooltip","pointFormat","headerFormat","valueSuffix","text","fallback","className","constructorType","highcharts","defaultProps","getTitle","summary","deaths","toLocaleString","cases","Date","lastUpdated","toLocaleDateString","toLocaleTimeString"],"mappings":"+OAUMA,G,MAAkBC,gBAAK,kBAAM,sCAEnCC,IAAUC,KACVC,IAAID,KAGJA,IAAWE,WAAW,CACpBC,MAAO,CACLC,MAAO,CACLC,WAAY,WAOlB,SAASC,EAAT,GAkBI,IAAD,IAjBDC,iBAiBC,MAjBW,UAiBX,EAhBDC,EAgBC,EAhBDA,YAgBC,IAfDC,gBAeC,MAfU,QAeV,EAdDC,EAcC,EAdDA,cACAC,EAaC,EAbDA,cACAC,EAYC,EAZDA,mBACAC,EAWC,EAXDA,KAWC,IAVDC,kBAUC,MAVY,UAUZ,EATDC,EASC,EATDA,QACAC,EAQC,EARDA,eACAC,EAOC,EAPDA,aAOC,IANDC,wBAMC,MApB0B,UAoB1B,MALDC,aAKC,MALO,WAKP,EAJDC,EAIC,EAJDA,cACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,cACAC,EACC,EADDA,aAEMC,EAAQC,IAAMlB,GAWdmB,EAAoBV,EACtB,CACEQ,MAlCqB,UAmCrBX,KAAMG,EACNW,KAAM,YACNC,QAAQ,EACRC,KAAM,WAER,GAEEC,EAAU,CACd3B,MAAO,CACLE,WAAY,QAEd0B,UAAW,CACTC,IAAKtB,EACLuB,IAAKtB,EACLuB,MA1BY,sBAEX,CAAC,KAAO,IAAM,GAAK,KAAMjC,KAAI,SAACkC,GAAD,MAAS,CACvCA,EADuC,eAE/BX,EAAMA,MAAM,GAFmB,aAEZA,EAAMA,MAAM,GAFA,aAEOA,EAAMA,MAAM,GAFnB,aAE0BW,EAF1B,UAF3B,CAMd,CAAC,EAAD,cAAWX,EAAMA,MAAM,GAAvB,aAA8BA,EAAMA,MAAM,GAA1C,aAAiDA,EAAMA,MAAM,GAA7D,QAqBEY,aAAcxB,GAEhBb,UAAW,CACTsC,SAAS,GAEXC,OAAQ,CACNC,gBACEvC,IAAWwC,gBACXxC,IAAWwC,eAAeF,QAC1BtC,IAAWwC,eAAeF,OAAOC,gBACnCE,UAAU,EACVC,OAAQ,WACRC,MAAO,SAETC,cAAe,CACbC,cAAe,CACbC,cAAe,UAEjBT,SAAS,GAEXU,YAAa,CACX9C,IAAK,CACHQ,YAEFuC,QAAS,CACPC,cAAc,EACdC,qBAAqB,IAGzBC,OAAQ,CACN,CACEC,YAAa,GACbvC,OACAwC,WAAY,CACVhB,SAAS,EACTiB,OAAQ,kCAEVC,OAAQtC,EACRF,UACAY,KAAMJ,EACNK,QAAQ,EACR4B,OAAQ,CACNC,MAAO,CACLjC,MAAOV,IAGX4C,QAAS,CACPC,YAAavC,EACbwC,aAAcvC,EACdwC,YAAavC,IAGjB,CACEE,MAAON,EACPL,KAAML,EACNoB,QAAQ,EACRC,KAAM,WAERH,GAEFP,MAAO,CACL2C,KAAM3C,IAIV,OAAOT,GAAiBE,GAAsBC,GAAQE,GAAWE,EAC/D,kBAAC,WAAD,CAAU8C,SAAU,kBAAC,IAAD,OAClB,yBAAKC,UAAU,sBACb,kBAACnE,EAAD,CAAiBoE,gBAAiB,WAAYC,WAAYlE,IAAY8B,QAASA,MAInF,uGAIJxB,EAAW6D,aAAe,CACxB5D,UAAW,UACXE,SAAU,QACVK,WAAY,UACZI,iBAlI2B,UAmI3BC,MAAO,YAuBMb,O,gCClLf,8CAEA,SAAS8D,EAAT,GAA8B,IAAVjD,EAAS,EAATA,MAClB,MAAM,2CAAN,OAAkDA,EAAlD,8DAA6GkD,EAAQC,OAAOC,eAC1H,SADF,qBAEcF,EAAQG,MAAMD,eAAe,SAF3C,0VAK0P,IAAIE,KAC1PJ,EAAQK,aACRC,qBAPJ,YAO4B,IAAIF,KAAKJ,EAAQK,aAAaE,qBAP1D,a","file":"static/js/1.f41c5e97.chunk.js","sourcesContent":["import Color from 'color'\nimport Highcharts from 'highcharts'\nimport exporting from 'highcharts/modules/exporting'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\n// import darkUnica from 'highcharts/themes/dark-unica'\nimport './CountryMap.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\nexporting(Highcharts)\nmap(Highcharts)\n// darkUnica(Highcharts)\n\nHighcharts.setOptions({\n  chart: {\n    style: {\n      fontFamily: 'Lato',\n    },\n  },\n})\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction CountryMap({\n  baseColor = '#FF0000',\n  borderLines,\n  colorKey = 'value',\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  hoverColor = '#A4EDBA',\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor = DEFAULT_BORDER_COLOR,\n  title = 'Untitled',\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle,\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map((key) => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`,\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`],\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        color: DEFAULT_BORDER_COLOR,\n        data: separatorLines,\n        name: 'Separator',\n        shadow: false,\n        type: 'mapline',\n      }\n    : {}\n\n  const options = {\n    chart: {\n      fontFamily: 'Lato',\n    },\n    colorAxis: {\n      max: colorMaxValue,\n      min: colorMinValue,\n      stops: colorStops,\n      tickInterval: colorValueInterval,\n    },\n    exporting: {\n      enabled: true,\n    },\n    legend: {\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor,\n      floating: true,\n      layout: 'vertical',\n      align: 'right',\n    },\n    mapNavigation: {\n      buttonOptions: {\n        verticalAlign: 'bottom',\n      },\n      enabled: true,\n    },\n    plotOptions: {\n      map: {\n        colorKey,\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false,\n      },\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data,\n        dataLabels: {\n          enabled: true,\n          format: '{point.properties.postal-code}',\n        },\n        joinBy: seriesJoinBy,\n        mapData,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor,\n          },\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix,\n        },\n      },\n      {\n        color: stateBorderColor,\n        data: borderLines,\n        shadow: false,\n        type: 'mapline',\n      },\n      separatorLineData,\n    ],\n    title: {\n      text: title,\n    },\n  }\n\n  return colorMaxValue && colorValueInterval && data && mapData && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'mapChart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: colorMaxValue, colorValueInterval, data, mapData, and seriesJoinBy'\n  )\n}\n\nCountryMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled',\n}\n\nCountryMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string,\n}\n\nexport default CountryMap\n","import summary from './us-summary.json'\n\nfunction getTitle({ title }) {\n  return `<span style=\"font-size:24px;\">COVID-19: ${title}</span><br /><span style=\"font-size:16px;\">Deaths: ${summary.deaths.toLocaleString(\n    'en-US'\n  )} | Cases: ${summary.cases.toLocaleString('en-US')}</span><br />\n  <span style=\"font-size:12px; color: #333333\">\n    Source: </span>\n    <a style=\"font-size:12px; text-decoration:underline; color: #333333\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">The New York Times</a><span style=\"font-size:12px; color: #333333\"> | Last Updated: ${new Date(\n      summary.lastUpdated\n    ).toLocaleDateString()} ${new Date(summary.lastUpdated).toLocaleTimeString()}</span>`\n}\n\nexport { getTitle }\n"],"sourceRoot":""}