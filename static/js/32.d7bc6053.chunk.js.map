{"version":3,"sources":["reports/us/states/IA.js","reports/Map.js","reports/us/report-service.js","reports/State.js"],"names":["IA","data","mapData","reportService","HighchartsReact","lazy","exporting","Highcharts","boost","drilldown","map","Map","baseColor","borderLines","colorKey","colorMaxValue","colorMinValue","colorValueInterval","hoverColor","separatorLines","seriesJoinBy","stateBorderColor","title","tooltipFormat","tooltipHeader","tooltipSuffix","tooltipTitle","color","Color","separatorLineData","name","shadow","type","options","enabled","useGPUTranslations","usePreallocated","chart","events","fontFamily","colorAxis","max","min","stops","key","tickInterval","activeDataLabelStyle","textDecoration","textOutline","legend","backgroundColor","defaultOptions","floating","layout","align","mapNavigation","buttonOptions","verticalAlign","plotOptions","mapline","showInLegend","enableMouseTracking","series","borderWidth","dataLabels","format","joinBy","states","hover","tooltip","pointFormat","headerFormat","valueSuffix","text","fallback","className","constructorType","highcharts","defaultProps","getTitle","cases","deaths","lastUpdated","reportType","charAt","toUpperCase","slice","toLocaleString","details","state","getDetails","Date","toLocaleDateString","toLocaleTimeString","State","summary","useContext","ReportContext","category","Math","round"],"mappings":"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","file":"static/js/32.d7bc6053.chunk.js","sourcesContent":["import mapData from '@highcharts/map-collection/countries/us/us-ia-all.geo.json'\nimport React from 'react'\nimport data from '../../../data/us/states/ia.json'\nimport reportService from '../report-service'\nimport State from '../../State'\n\nfunction IA() {\n  return <State {...data} mapData={mapData} reportService={reportService} />\n}\n\nexport default IA\n","import Color from 'color'\nimport Highcharts from 'highcharts'\nimport boost from 'highcharts/modules/boost'\nimport drilldown from 'highcharts/modules/drilldown'\nimport exporting from 'highcharts/modules/exporting'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\nimport './Map.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\nexporting(Highcharts)\nboost(Highcharts)\ndrilldown(Highcharts)\nmap(Highcharts)\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction Map({\n  baseColor,\n  borderLines,\n  colorKey,\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  drilldown,\n  hoverColor,\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor,\n  title,\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle,\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map((key) => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`,\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`],\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        color: DEFAULT_BORDER_COLOR,\n        data: separatorLines,\n        name: 'Separator',\n        shadow: false,\n        type: 'mapline',\n      }\n    : {}\n\n  const options = {\n    boost: {\n      enabled: true,\n      useGPUTranslations: true,\n      usePreallocated: true,\n    },\n    chart: {\n      events: {\n        drilldown,\n      },\n      fontFamily: 'Lato',\n    },\n    colorAxis: {\n      max: colorMaxValue,\n      min: colorMinValue,\n      stops: colorStops,\n      tickInterval: colorValueInterval,\n    },\n    drilldown: {\n      activeDataLabelStyle: {\n        color: '#FFFFFF',\n        textDecoration: 'none',\n        textOutline: '1px #000000',\n      },\n      // drillUpButton: {\n      //   relativeTo: 'spacingBox',\n      //   position: {\n      //     x: 0,\n      //     y: 60,\n      //   },\n      // },\n    },\n    legend: {\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor,\n      floating: true,\n      layout: 'vertical',\n      align: 'right',\n    },\n    mapNavigation: {\n      buttonOptions: {\n        verticalAlign: 'bottom',\n      },\n      enabled: true,\n    },\n    plotOptions: {\n      map: {\n        colorKey,\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false,\n      },\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data,\n        dataLabels: {\n          enabled: true,\n          format: '{point.properties.postal-code}',\n        },\n        joinBy: seriesJoinBy,\n        mapData,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor,\n          },\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix,\n        },\n      },\n      {\n        color: stateBorderColor,\n        data: borderLines,\n        shadow: false,\n        type: 'mapline',\n      },\n      separatorLineData,\n    ],\n    title: {\n      text: title,\n    },\n  }\n\n  return colorMaxValue && data && mapData && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'mapChart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: colorMaxValue, data, mapData, and seriesJoinBy'\n  )\n}\n\nMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled',\n}\n\nMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  drilldown: PropTypes.func,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string,\n}\n\nexport default Map\n","function getDetails({ state }) {\n  let details = ''\n  switch (state) {\n    case 'New York':\n      details = 'NYC split between boroughs.'\n      break\n    case 'Missouri':\n      details = 'KC split between counties.'\n      break\n    default:\n      break\n  }\n  return details\n}\n\nconst reportService = {\n  getTitle: ({ name, cases, deaths, lastUpdated, reportType }) => {\n    return `<span style=\"font-size:24px;\">COVID-19: ${name} ${\n      reportType.charAt(0).toUpperCase() + reportType.slice(1)\n    }</span><br /><span style=\"font-size:16px;\">Deaths: ${deaths.toLocaleString(\n      'en-US'\n    )} | Cases: ${cases.toLocaleString('en-US')}${getDetails({ name })}</span><br />\n  <span style=\"font-size:12px; color: #333333\">\n    Source: </span>\n    <a style=\"font-size:12px; text-decoration:underline; color: #333333\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">The New York Times</a><span style=\"font-size:12px; color: #333333\"> | Last Updated: ${new Date(\n      lastUpdated\n    ).toLocaleDateString()} ${new Date(lastUpdated).toLocaleTimeString()}</span>`\n  },\n}\n\nexport default reportService\n","import PropTypes from 'prop-types'\nimport React, { useContext } from 'react'\nimport ReportContext from '../core/ReportContext'\nimport Map from './Map'\n\nfunction State({ data, mapData, reportService, summary }) {\n  const { reportType } = useContext(ReportContext)\n\n  return (\n    <Map\n      colorKey={reportType.category}\n      colorMaxValue={summary[`${reportType.category}Max`]}\n      colorMinValue={0}\n      colorValueInterval={Math.round(summary[`${reportType.category}Max`] / 5)}\n      data={data}\n      mapData={mapData}\n      seriesJoinBy={'fips'}\n      title={reportService.getTitle({ ...summary, reportType: reportType.category })}\n      tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}\"\n      tooltipHeader=\"{point.key}<br />\"\n    />\n  )\n}\n\nState.propTypes = {\n  data: PropTypes.array,\n  mapData: PropTypes.object,\n  reportService: PropTypes.object,\n  summary: PropTypes.object,\n}\n\nexport default State\n"],"sourceRoot":""}