{"version":3,"sources":["maps/us/states/TN.js","maps/Map.js","maps/us/report-service.js","maps/us/State.js"],"names":["TN","data","mapData","HighchartsReact","lazy","exporting","Highcharts","boost","drilldown","map","setOptions","chart","style","fontFamily","Map","baseColor","borderLines","colorKey","colorMaxValue","colorMinValue","colorValueInterval","hoverColor","separatorLines","seriesJoinBy","stateBorderColor","title","tooltipFormat","tooltipHeader","tooltipSuffix","tooltipTitle","color","Color","separatorLineData","name","shadow","type","options","enabled","useGPUTranslations","usePreallocated","events","colorAxis","max","min","stops","key","tickInterval","activeDataLabelStyle","textDecoration","textOutline","drillUpButton","relativeTo","position","x","y","legend","backgroundColor","defaultOptions","floating","layout","align","mapNavigation","buttonOptions","verticalAlign","plotOptions","mapline","showInLegend","enableMouseTracking","series","borderWidth","dataLabels","format","joinBy","states","hover","tooltip","pointFormat","headerFormat","valueSuffix","text","fallback","className","constructorType","highcharts","defaultProps","getTitle","cases","deaths","lastUpdated","reportType","details","charAt","toUpperCase","slice","toLocaleString","Date","toLocaleDateString","toLocaleTimeString","State","useContext","ReportContext","summary","Math","round","hasSeparatorLines"],"mappings":"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","file":"static/js/50.14b77eda.chunk.js","sourcesContent":["import mapData from '@highcharts/map-collection/countries/us/us-tn-all.geo.json'\nimport React from 'react'\nimport data from './tn.json'\nimport State from '../State'\n\nfunction TN() {\n  return <State data={data} mapData={mapData} />\n}\n\nexport default TN\n","import Color from 'color'\nimport Highcharts from 'highcharts'\nimport boost from 'highcharts/modules/boost'\nimport drilldown from 'highcharts/modules/drilldown'\nimport exporting from 'highcharts/modules/exporting'\nimport map from 'highcharts/modules/map'\nimport PropTypes from 'prop-types'\nimport React, { lazy, Suspense } from 'react'\nimport Loader from '../core/Loader'\n// import darkUnica from 'highcharts/themes/dark-unica'\nimport './Map.css'\n\nconst HighchartsReact = lazy(() => import('highcharts-react-official'))\n\nexporting(Highcharts)\nboost(Highcharts)\ndrilldown(Highcharts)\nmap(Highcharts)\n// darkUnica(Highcharts)\n\nHighcharts.setOptions({\n  chart: {\n    style: {\n      fontFamily: 'Lato',\n    },\n  },\n})\n\nconst DEFAULT_BORDER_COLOR = '#DDDDDD'\n\nfunction Map({\n  baseColor,\n  borderLines,\n  colorKey,\n  colorMaxValue,\n  colorMinValue,\n  colorValueInterval,\n  data,\n  drilldown,\n  hoverColor,\n  mapData,\n  separatorLines,\n  seriesJoinBy,\n  stateBorderColor,\n  title,\n  tooltipFormat,\n  tooltipHeader,\n  tooltipSuffix,\n  tooltipTitle,\n}) {\n  const color = Color(baseColor)\n\n  const colorStops = [\n    // First stop tweaked slightly for better visibility. Should actually be 0.\n    ...[0.025, 0.25, 0.5, 0.75].map((key) => [\n      key,\n      `rgba(${color.color[0]}, ${color.color[1]}, ${color.color[2]}, ${key})`,\n    ]),\n    [1, `rgb(${color.color[0]}, ${color.color[1]}, ${color.color[2]})`],\n  ]\n\n  const separatorLineData = separatorLines\n    ? {\n        color: DEFAULT_BORDER_COLOR,\n        data: separatorLines,\n        name: 'Separator',\n        shadow: false,\n        type: 'mapline',\n      }\n    : {}\n\n  const options = {\n    boost: {\n      enabled: true,\n      useGPUTranslations: true,\n      usePreallocated: true,\n    },\n    chart: {\n      events: {\n        drilldown,\n      },\n      fontFamily: 'Lato',\n    },\n    colorAxis: {\n      max: colorMaxValue,\n      min: colorMinValue,\n      stops: colorStops,\n      tickInterval: colorValueInterval,\n    },\n    drilldown: {\n      activeDataLabelStyle: {\n        color: '#FFFFFF',\n        textDecoration: 'none',\n        textOutline: '1px #000000',\n      },\n      drillUpButton: {\n        relativeTo: 'spacingBox',\n        position: {\n          x: 0,\n          y: 60,\n        },\n      },\n    },\n    legend: {\n      backgroundColor:\n        Highcharts.defaultOptions &&\n        Highcharts.defaultOptions.legend &&\n        Highcharts.defaultOptions.legend.backgroundColor,\n      floating: true,\n      layout: 'vertical',\n      align: 'right',\n    },\n    mapNavigation: {\n      buttonOptions: {\n        verticalAlign: 'bottom',\n      },\n      enabled: true,\n    },\n    plotOptions: {\n      map: {\n        colorKey,\n      },\n      mapline: {\n        showInLegend: false,\n        enableMouseTracking: false,\n      },\n    },\n    series: [\n      {\n        borderWidth: 0.5,\n        data,\n        dataLabels: {\n          enabled: true,\n          format: '{point.properties.postal-code}',\n        },\n        joinBy: seriesJoinBy,\n        mapData,\n        name: tooltipTitle,\n        shadow: false,\n        states: {\n          hover: {\n            color: hoverColor,\n          },\n        },\n        tooltip: {\n          pointFormat: tooltipFormat,\n          headerFormat: tooltipHeader,\n          valueSuffix: tooltipSuffix,\n        },\n      },\n      {\n        color: stateBorderColor,\n        data: borderLines,\n        shadow: false,\n        type: 'mapline',\n      },\n      separatorLineData,\n    ],\n    title: {\n      text: title,\n    },\n  }\n\n  return colorMaxValue && data && mapData && seriesJoinBy ? (\n    <Suspense fallback={<Loader />}>\n      <div className=\"highcharts-wrapper\">\n        <HighchartsReact constructorType={'mapChart'} highcharts={Highcharts} options={options} />\n      </div>\n    </Suspense>\n  ) : (\n    'The following props are required: colorMaxValue, data, mapData, and seriesJoinBy'\n  )\n}\n\nMap.defaultProps = {\n  baseColor: '#FF0000',\n  colorKey: 'value',\n  hoverColor: '#A4EDBA',\n  stateBorderColor: DEFAULT_BORDER_COLOR,\n  title: 'Untitled',\n}\n\nMap.propTypes = {\n  baseColor: PropTypes.string,\n  borderLines: PropTypes.array,\n  colorKey: PropTypes.string,\n  colorMaxValue: PropTypes.number.isRequired,\n  colorMinValue: PropTypes.number,\n  colorValueInterval: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  drilldown: PropTypes.func,\n  hoverColor: PropTypes.string,\n  mapData: PropTypes.object.isRequired,\n  separatorLines: PropTypes.array,\n  seriesJoinBy: PropTypes.string.isRequired,\n  stateBorderColor: PropTypes.string,\n  title: PropTypes.string,\n  tooltipFormat: PropTypes.string,\n  tooltipHeader: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  tooltipTitle: PropTypes.string,\n}\n\nexport default Map\n","function getTitle({ name, cases, deaths, lastUpdated, reportType, details }) {\n  return `<span style=\"font-size:24px;\">COVID-19: ${name} ${\n    reportType.charAt(0).toUpperCase() + reportType.slice(1)\n  }</span><br /><span style=\"font-size:16px;\">Deaths: ${deaths.toLocaleString('en-US')} | Cases: ${cases.toLocaleString(\n    'en-US'\n  )}${details ? ` | (${details})` : ''}</span><br />\n  <span style=\"font-size:12px; color: #333333\">\n    Source: </span>\n    <a style=\"font-size:12px; text-decoration:underline; color: #333333\" href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\">The New York Times</a><span style=\"font-size:12px; color: #333333\"> | Last Updated: ${new Date(\n      lastUpdated\n    ).toLocaleDateString()} ${new Date(lastUpdated).toLocaleTimeString()}</span>`\n}\n\nexport { getTitle }\n","import PropTypes from 'prop-types'\nimport React, { useContext } from 'react'\nimport ReportContext from '../../core/ReportContext'\nimport Map from '../Map'\nimport { getTitle } from './report-service'\n\nfunction State({ data, mapData }) {\n  const { reportType } = useContext(ReportContext)\n\n  let details = ''\n  switch (data.summary.name) {\n    case 'New York':\n      details = 'NYC split between boroughs.'\n      break\n    case 'Missouri':\n      details = 'KC split between counties.'\n      break\n    default:\n      break\n  }\n\n  return (\n    <Map\n      colorKey={reportType}\n      colorMaxValue={data.summary[`${reportType}Max`]}\n      colorMinValue={0}\n      colorValueInterval={Math.round(data.summary[`${reportType}Max`] / 5)}\n      data={data.data}\n      hasSeparatorLines={true}\n      mapData={mapData}\n      seriesJoinBy={'fips'}\n      title={getTitle({\n        ...data.summary,\n        reportType,\n        details,\n      })}\n      tooltipFormat=\"Deaths: {point.deaths}<br />Cases: {point.cases}\"\n      tooltipHeader=\"{point.key}<br />\"\n      tooltipSuffix=\"\"\n    />\n  )\n}\n\nState.propTypes = {\n  data: PropTypes.object,\n  mapData: PropTypes.object,\n}\n\nexport default State\n"],"sourceRoot":""}